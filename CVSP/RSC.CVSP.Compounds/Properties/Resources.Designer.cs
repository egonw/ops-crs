//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RSC.CVSP.Compounds.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RSC.CVSP.Compounds.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;acidgroups&gt;
        ///  &lt;!-- OSO3H--&gt;
        ///  &lt;acidgroup rank=&quot;10&quot; acid=&quot;OS(=O)(=O)[O;H]&quot; base=&quot;OS(=O)(=O)[O-]&quot; acid2base=&quot;[*:1][O:2][S:3](=[O:4])(=[O:5])[O:6][H:7]&gt;&gt;[*:1][O:2][S:3](=[O:4])(=[O:5])[O-:6].[H+:7]&quot; 
        ///			 base2acid=&quot;[*:1][O:2][S:3](=[O:4])(=[O:5])[O-:6].[H+:7]&gt;&gt;[*:1][O:2][S:3](=[O:4])(=[O:5])[O:6][H:7]&quot;/&gt;
        ///  
        ///  &lt;!-- SO3H--&gt;
        ///  &lt;acidgroup rank=&quot;20&quot; acid=&quot;[!O]S(=O)(=O)[O;H]&quot; base=&quot;[!O]S(=O)(=O)[O-]&quot; acid2base=&quot;[!O:1][S:2](=[O:3])(=[O:4])[O:5][H:6]&gt;&gt;[!O:1][S:2](=[O:3]) [rest of string was truncated]&quot;;.
        /// </summary>
        public static string acidgroups {
            get {
                return ResourceManager.GetString("acidgroups", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;acidgroups&gt;
        ///  &lt;!-- OSO3H--&gt;
        ///  &lt;acidgroup rank=&quot;10&quot; acid=&quot;OS(=O)(=O)[O;H]&quot; base=&quot;OS(=O)(=O)[O-]&quot; acid2base=&quot;[*:1][O:2][S:3](=[O:4])(=[O:5])[O:6][H:7]&gt;&gt;[*:1][O:2][S:3](=[O:4])(=[O:5])[O-:6].[H+:7]&quot; base2acid=&quot;[*:1][O:2][S:3](=[O:4])(=[O:5])[O-:6].[H+:7]&gt;&gt;[*:1][O:2][S:3](=[O:4])(=[O:5])[O:6][H:7]&quot;/&gt;
        ///
        ///  &lt;!-- SO3H--&gt;
        ///  &lt;acidgroup rank=&quot;20&quot; acid=&quot;[!O]S(=O)(=O)[O;H]&quot; base=&quot;[!O]S(=O)(=O)[O-]&quot; acid2base=&quot;[!O:1][S:2](=[O:3])(=[O:4])[O:5][H:6]&gt;&gt;[!O:1][S:2](=[O:3])(=[O:4]) [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FDAAcidGroups {
            get {
                return ResourceManager.GetString("FDAAcidGroups", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;!-- These normalizations are keyed to the IDs in ChemicalAnalyser.--&gt;
        ///&lt;rules&gt;
        ///  &lt;!-- START OF INCHI normalization (modified)--&gt;
        ///  &lt;!-- 1.1--&gt;
        ///  &lt;rule id=&quot;1.1&quot; category=&quot;INCHI&quot; type=&quot;SMIRKS&quot; value=&quot;[*:1][H+:2]&gt;&gt;[*+:1][H:2]&quot; description=&quot;XH+ -&gt; X+-H, X - any atom except H&quot;/&gt;
        ///
        ///  &lt;!-- 1.2--&gt;
        ///  &lt;rule id=&quot;1.2&quot; category=&quot;INCHI&quot; type=&quot;SMIRKS&quot; value=&quot;[*:1][H-:2]&gt;&gt;[*-:1][H:2]&quot; description=&quot;XH- -&gt; X--H, X - any atom except H&quot;/&gt;
        ///
        ///  &lt;!-- 1.3--&gt;
        ///  &lt;rule id=&quot;1.3&quot; categor [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FDAStandardizationRules {
            get {
                return ResourceManager.GetString("FDAStandardizationRules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;classes&gt;
        ///  &lt;!--
        ///  &lt;class&gt;
        ///    &lt;name&gt;abietadiene&lt;/name&gt;
        ///    &lt;id&gt;CHEBI:50072&lt;/id&gt;
        ///    &lt;rule&gt;
        ///      &lt;or&gt;
        ///        &lt;smarts&gt;[H][C@]12CCC(=CC1=CC[C@@]1([H])C(C)(C)CCC[C@]21C)C(C)C&lt;/smarts&gt;
        ///        &lt;smarts&gt;[H][C@]12CC=C(C=C1CC[C@@]1([H])C(C)(C)CCC[C@]21C)C(C)C&lt;/smarts&gt;
        ///      &lt;/or&gt;
        ///    &lt;/rule&gt;
        ///    &lt;example&gt;[H][C@]12CC=C(C=C1CC[C@@]1([H])C(C)(C)CCC[C@]21C)C(C)C&lt;/example&gt;
        ///    &lt;counterexample&gt;[H][C@@]12CC[C@@]3([H])C(C)(C)CCC[C@]3(C)[C@@]1([H])CC[C@@H](C2)C(C)C&lt;/cou [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ontology {
            get {
                return ResourceManager.GetString("ontology", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;rules&gt;
        ///	
        ///	&lt;!-- CVSP modules (value should be from the case-sensitive list of supported modules list below):
        ///		
        ///		Dearomatize
        ///		Aromatize
        ///		ConvertDoubleBondWithAttachedEitherSingleBondStereo2EitherDoubleBond
        ///		Layout
        ///		StandardizeHexagons
        ///		Disconnect_Metals_from_NonMetals
        ///		Disconnect_Metals_From_NOF
        ///		Ionize_Neutral_Alkaline_Metals_With_Carboxylic_Acids
        ///		Apply_CVSP_AcidBase_SMIRKS
        ///		Remove_Free_Metals
        ///		Standard_InChI_Normalization
        ///		CanonicalizeTa [rest of string was truncated]&quot;;.
        /// </summary>
        public static string standardization {
            get {
                return ResourceManager.GetString("standardization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;rules&gt;
        ///	&lt;!-- needed to pre-standardization--&gt;
        ///	&lt;rule category=&quot;CVSP&quot; type=&quot;module&quot; value=&quot;Dearomatize&quot;&gt;&lt;/rule&gt;
        ///	
        ///	&lt;!-- https://wwwdev.ebi.ac.uk/chembl/extra/francis/standardiser/ --&gt;
        ///	&lt;!-- best effort was made to reproduce rules from the above URL--&gt;
        ///	&lt;!-- SMIRKS rules --&gt;
        ///	&lt;rule category=&quot;EBI&quot; type=&quot;SMIRKS&quot; 
        ///		  value=&quot;[OX2H1:1]-[C:2]=[NX2:3]&gt;&gt;[OH0:1]=[*:2]-[NH1:3]&quot; 
        ///		  description=&quot;hydroxy imine -&gt; carboxamide&quot;/&gt;
        ///
        ///	&lt;rule category=&quot;EBI&quot; 
        ///		type=&quot;SMIRKS [rest of string was truncated]&quot;;.
        /// </summary>
        public static string standardization_ebi {
            get {
                return ResourceManager.GetString("standardization_ebi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;rules&gt;
        ///	&lt;moleculerules&gt;
        ///	&lt;!-- The SMARTS tests below are complimentary to set of validations that CVSP does by default --&gt;
        ///		
        ///		&lt;Warning message=&quot;Contains cyclobutane&quot; description=&quot;[CX4;H2;r4]1[CX4;H2;r4][CX4;H2;r4][CX4;H2;r4]1&quot;&gt;
        ///			&lt;test name=&quot;SMARTStest&quot; param=&quot;[CX4;H2;r4]1[CX4;H2;r4][CX4;H2;r4][CX4;H2;r4]1&quot;/&gt;
        ///		&lt;/Warning&gt;
        ///		&lt;Warning message=&quot;Contains ethane&quot; description=&quot;[CX4;H3][CX4;H3]&quot;&gt;
        ///			&lt;test name=&quot;SMARTStest&quot; param=&quot;[CX4;H3][CX4;H3]&quot;/&gt;
        ///		&lt;/Warning [rest of string was truncated]&quot;;.
        /// </summary>
        public static string validation {
            get {
                return ResourceManager.GetString("validation", resourceCulture);
            }
        }
    }
}
