//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace RSC.CVSP.Compounds.com.chemspider.www.BatchNames1 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BatchNamesSoap", Namespace="http://www.chemspider.com/")]
    public partial class BatchNames : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback Mol2ThreeDMolOperationCompleted;
        
        private System.Threading.SendOrPostCallback N2strwsDLLOperationCompleted;
        
        private System.Threading.SendOrPostCallback N2strwsbatDLLOperationCompleted;
        
        private System.Threading.SendOrPostCallback N2strwsOperationCompleted;
        
        private System.Threading.SendOrPostCallback N2strwsbatOperationCompleted;
        
        private System.Threading.SendOrPostCallback synonym2CSIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MolToInChIOperationCompleted;
        
        private System.Threading.SendOrPostCallback MolToInChIKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStructureBestNameByCSIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStructureBestNamesByCSIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStructureSynonymsByCSIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWikipediaNamesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BatchNames() {
            this.Url = global::RSC.CVSP.Compounds.Properties.Settings.Default.ChemValidatorLib_com_chemspider_www_BatchNames1_BatchNames;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event Mol2ThreeDMolCompletedEventHandler Mol2ThreeDMolCompleted;
        
        /// <remarks/>
        public event N2strwsDLLCompletedEventHandler N2strwsDLLCompleted;
        
        /// <remarks/>
        public event N2strwsbatDLLCompletedEventHandler N2strwsbatDLLCompleted;
        
        /// <remarks/>
        public event N2strwsCompletedEventHandler N2strwsCompleted;
        
        /// <remarks/>
        public event N2strwsbatCompletedEventHandler N2strwsbatCompleted;
        
        /// <remarks/>
        public event synonym2CSIDsCompletedEventHandler synonym2CSIDsCompleted;
        
        /// <remarks/>
        public event MolToInChICompletedEventHandler MolToInChICompleted;
        
        /// <remarks/>
        public event MolToInChIKeyCompletedEventHandler MolToInChIKeyCompleted;
        
        /// <remarks/>
        public event GetStructureBestNameByCSIDCompletedEventHandler GetStructureBestNameByCSIDCompleted;
        
        /// <remarks/>
        public event GetStructureBestNamesByCSIDsCompletedEventHandler GetStructureBestNamesByCSIDsCompleted;
        
        /// <remarks/>
        public event GetStructureSynonymsByCSIDCompletedEventHandler GetStructureSynonymsByCSIDCompleted;
        
        /// <remarks/>
        public event GetWikipediaNamesCompletedEventHandler GetWikipediaNamesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.chemspider.com/Mol2ThreeDMol", RequestNamespace="http://www.chemspider.com/", ResponseNamespace="http://www.chemspider.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Mol2ThreeDMol(string mol, string token) {
            object[] results = this.Invoke("Mol2ThreeDMol", new object[] {
                        mol,
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Mol2ThreeDMolAsync(string mol, string token) {
            this.Mol2ThreeDMolAsync(mol, token, null);
        }
        
        /// <remarks/>
        public void Mol2ThreeDMolAsync(string mol, string token, object userState) {
            if ((this.Mol2ThreeDMolOperationCompleted == null)) {
                this.Mol2ThreeDMolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMol2ThreeDMolOperationCompleted);
            }
            this.InvokeAsync("Mol2ThreeDMol", new object[] {
                        mol,
                        token}, this.Mol2ThreeDMolOperationCompleted, userState);
        }
        
        private void OnMol2ThreeDMolOperationCompleted(object arg) {
            if ((this.Mol2ThreeDMolCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Mol2ThreeDMolCompleted(this, new Mol2ThreeDMolCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.chemspider.com/N2strwsDLL", RequestNamespace="http://www.chemspider.com/", ResponseNamespace="http://www.chemspider.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string N2strwsDLL(string name, string token) {
            object[] results = this.Invoke("N2strwsDLL", new object[] {
                        name,
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void N2strwsDLLAsync(string name, string token) {
            this.N2strwsDLLAsync(name, token, null);
        }
        
        /// <remarks/>
        public void N2strwsDLLAsync(string name, string token, object userState) {
            if ((this.N2strwsDLLOperationCompleted == null)) {
                this.N2strwsDLLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnN2strwsDLLOperationCompleted);
            }
            this.InvokeAsync("N2strwsDLL", new object[] {
                        name,
                        token}, this.N2strwsDLLOperationCompleted, userState);
        }
        
        private void OnN2strwsDLLOperationCompleted(object arg) {
            if ((this.N2strwsDLLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.N2strwsDLLCompleted(this, new N2strwsDLLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.chemspider.com/N2strwsbatDLL", RequestNamespace="http://www.chemspider.com/", ResponseNamespace="http://www.chemspider.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string N2strwsbatDLL(string[] names, string token) {
            object[] results = this.Invoke("N2strwsbatDLL", new object[] {
                        names,
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void N2strwsbatDLLAsync(string[] names, string token) {
            this.N2strwsbatDLLAsync(names, token, null);
        }
        
        /// <remarks/>
        public void N2strwsbatDLLAsync(string[] names, string token, object userState) {
            if ((this.N2strwsbatDLLOperationCompleted == null)) {
                this.N2strwsbatDLLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnN2strwsbatDLLOperationCompleted);
            }
            this.InvokeAsync("N2strwsbatDLL", new object[] {
                        names,
                        token}, this.N2strwsbatDLLOperationCompleted, userState);
        }
        
        private void OnN2strwsbatDLLOperationCompleted(object arg) {
            if ((this.N2strwsbatDLLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.N2strwsbatDLLCompleted(this, new N2strwsbatDLLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.chemspider.com/N2strws", RequestNamespace="http://www.chemspider.com/", ResponseNamespace="http://www.chemspider.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string N2strws(string name, string token) {
            object[] results = this.Invoke("N2strws", new object[] {
                        name,
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void N2strwsAsync(string name, string token) {
            this.N2strwsAsync(name, token, null);
        }
        
        /// <remarks/>
        public void N2strwsAsync(string name, string token, object userState) {
            if ((this.N2strwsOperationCompleted == null)) {
                this.N2strwsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnN2strwsOperationCompleted);
            }
            this.InvokeAsync("N2strws", new object[] {
                        name,
                        token}, this.N2strwsOperationCompleted, userState);
        }
        
        private void OnN2strwsOperationCompleted(object arg) {
            if ((this.N2strwsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.N2strwsCompleted(this, new N2strwsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.chemspider.com/N2strwsbat", RequestNamespace="http://www.chemspider.com/", ResponseNamespace="http://www.chemspider.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string N2strwsbat(string[] names, string token) {
            object[] results = this.Invoke("N2strwsbat", new object[] {
                        names,
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void N2strwsbatAsync(string[] names, string token) {
            this.N2strwsbatAsync(names, token, null);
        }
        
        /// <remarks/>
        public void N2strwsbatAsync(string[] names, string token, object userState) {
            if ((this.N2strwsbatOperationCompleted == null)) {
                this.N2strwsbatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnN2strwsbatOperationCompleted);
            }
            this.InvokeAsync("N2strwsbat", new object[] {
                        names,
                        token}, this.N2strwsbatOperationCompleted, userState);
        }
        
        private void OnN2strwsbatOperationCompleted(object arg) {
            if ((this.N2strwsbatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.N2strwsbatCompleted(this, new N2strwsbatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.chemspider.com/synonym2CSIDs", RequestNamespace="http://www.chemspider.com/", ResponseNamespace="http://www.chemspider.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] synonym2CSIDs(string synonym, string token) {
            object[] results = this.Invoke("synonym2CSIDs", new object[] {
                        synonym,
                        token});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void synonym2CSIDsAsync(string synonym, string token) {
            this.synonym2CSIDsAsync(synonym, token, null);
        }
        
        /// <remarks/>
        public void synonym2CSIDsAsync(string synonym, string token, object userState) {
            if ((this.synonym2CSIDsOperationCompleted == null)) {
                this.synonym2CSIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.Onsynonym2CSIDsOperationCompleted);
            }
            this.InvokeAsync("synonym2CSIDs", new object[] {
                        synonym,
                        token}, this.synonym2CSIDsOperationCompleted, userState);
        }
        
        private void Onsynonym2CSIDsOperationCompleted(object arg) {
            if ((this.synonym2CSIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.synonym2CSIDsCompleted(this, new synonym2CSIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.chemspider.com/MolToInChI", RequestNamespace="http://www.chemspider.com/", ResponseNamespace="http://www.chemspider.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MolToInChI(string mol, InChIFlags flags, string token) {
            object[] results = this.Invoke("MolToInChI", new object[] {
                        mol,
                        flags,
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MolToInChIAsync(string mol, InChIFlags flags, string token) {
            this.MolToInChIAsync(mol, flags, token, null);
        }
        
        /// <remarks/>
        public void MolToInChIAsync(string mol, InChIFlags flags, string token, object userState) {
            if ((this.MolToInChIOperationCompleted == null)) {
                this.MolToInChIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMolToInChIOperationCompleted);
            }
            this.InvokeAsync("MolToInChI", new object[] {
                        mol,
                        flags,
                        token}, this.MolToInChIOperationCompleted, userState);
        }
        
        private void OnMolToInChIOperationCompleted(object arg) {
            if ((this.MolToInChICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MolToInChICompleted(this, new MolToInChICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.chemspider.com/MolToInChIKey", RequestNamespace="http://www.chemspider.com/", ResponseNamespace="http://www.chemspider.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MolToInChIKey(string mol, InChIFlags flags, string token) {
            object[] results = this.Invoke("MolToInChIKey", new object[] {
                        mol,
                        flags,
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MolToInChIKeyAsync(string mol, InChIFlags flags, string token) {
            this.MolToInChIKeyAsync(mol, flags, token, null);
        }
        
        /// <remarks/>
        public void MolToInChIKeyAsync(string mol, InChIFlags flags, string token, object userState) {
            if ((this.MolToInChIKeyOperationCompleted == null)) {
                this.MolToInChIKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMolToInChIKeyOperationCompleted);
            }
            this.InvokeAsync("MolToInChIKey", new object[] {
                        mol,
                        flags,
                        token}, this.MolToInChIKeyOperationCompleted, userState);
        }
        
        private void OnMolToInChIKeyOperationCompleted(object arg) {
            if ((this.MolToInChIKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MolToInChIKeyCompleted(this, new MolToInChIKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.chemspider.com/GetStructureBestNameByCSID", RequestNamespace="http://www.chemspider.com/", ResponseNamespace="http://www.chemspider.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStructureBestNameByCSID(string csidString, string token) {
            object[] results = this.Invoke("GetStructureBestNameByCSID", new object[] {
                        csidString,
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStructureBestNameByCSIDAsync(string csidString, string token) {
            this.GetStructureBestNameByCSIDAsync(csidString, token, null);
        }
        
        /// <remarks/>
        public void GetStructureBestNameByCSIDAsync(string csidString, string token, object userState) {
            if ((this.GetStructureBestNameByCSIDOperationCompleted == null)) {
                this.GetStructureBestNameByCSIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStructureBestNameByCSIDOperationCompleted);
            }
            this.InvokeAsync("GetStructureBestNameByCSID", new object[] {
                        csidString,
                        token}, this.GetStructureBestNameByCSIDOperationCompleted, userState);
        }
        
        private void OnGetStructureBestNameByCSIDOperationCompleted(object arg) {
            if ((this.GetStructureBestNameByCSIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStructureBestNameByCSIDCompleted(this, new GetStructureBestNameByCSIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.chemspider.com/GetStructureBestNamesByCSIDs", RequestNamespace="http://www.chemspider.com/", ResponseNamespace="http://www.chemspider.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetStructureBestNamesByCSIDs(string[] csidStrings, string token) {
            object[] results = this.Invoke("GetStructureBestNamesByCSIDs", new object[] {
                        csidStrings,
                        token});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStructureBestNamesByCSIDsAsync(string[] csidStrings, string token) {
            this.GetStructureBestNamesByCSIDsAsync(csidStrings, token, null);
        }
        
        /// <remarks/>
        public void GetStructureBestNamesByCSIDsAsync(string[] csidStrings, string token, object userState) {
            if ((this.GetStructureBestNamesByCSIDsOperationCompleted == null)) {
                this.GetStructureBestNamesByCSIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStructureBestNamesByCSIDsOperationCompleted);
            }
            this.InvokeAsync("GetStructureBestNamesByCSIDs", new object[] {
                        csidStrings,
                        token}, this.GetStructureBestNamesByCSIDsOperationCompleted, userState);
        }
        
        private void OnGetStructureBestNamesByCSIDsOperationCompleted(object arg) {
            if ((this.GetStructureBestNamesByCSIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStructureBestNamesByCSIDsCompleted(this, new GetStructureBestNamesByCSIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.chemspider.com/GetStructureSynonymsByCSID", RequestNamespace="http://www.chemspider.com/", ResponseNamespace="http://www.chemspider.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetStructureSynonymsByCSID(int csid, string token) {
            object[] results = this.Invoke("GetStructureSynonymsByCSID", new object[] {
                        csid,
                        token});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStructureSynonymsByCSIDAsync(int csid, string token) {
            this.GetStructureSynonymsByCSIDAsync(csid, token, null);
        }
        
        /// <remarks/>
        public void GetStructureSynonymsByCSIDAsync(int csid, string token, object userState) {
            if ((this.GetStructureSynonymsByCSIDOperationCompleted == null)) {
                this.GetStructureSynonymsByCSIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStructureSynonymsByCSIDOperationCompleted);
            }
            this.InvokeAsync("GetStructureSynonymsByCSID", new object[] {
                        csid,
                        token}, this.GetStructureSynonymsByCSIDOperationCompleted, userState);
        }
        
        private void OnGetStructureSynonymsByCSIDOperationCompleted(object arg) {
            if ((this.GetStructureSynonymsByCSIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStructureSynonymsByCSIDCompleted(this, new GetStructureSynonymsByCSIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.chemspider.com/GetWikipediaNames", RequestNamespace="http://www.chemspider.com/", ResponseNamespace="http://www.chemspider.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetWikipediaNames(int csid, string token) {
            object[] results = this.Invoke("GetWikipediaNames", new object[] {
                        csid,
                        token});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWikipediaNamesAsync(int csid, string token) {
            this.GetWikipediaNamesAsync(csid, token, null);
        }
        
        /// <remarks/>
        public void GetWikipediaNamesAsync(int csid, string token, object userState) {
            if ((this.GetWikipediaNamesOperationCompleted == null)) {
                this.GetWikipediaNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWikipediaNamesOperationCompleted);
            }
            this.InvokeAsync("GetWikipediaNames", new object[] {
                        csid,
                        token}, this.GetWikipediaNamesOperationCompleted, userState);
        }
        
        private void OnGetWikipediaNamesOperationCompleted(object arg) {
            if ((this.GetWikipediaNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWikipediaNamesCompleted(this, new GetWikipediaNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.chemspider.com/")]
    public partial class InChIFlags {
        
        private InChIVersion versionField;
        
        private InChIStereo stereoField;
        
        private bool fixedHField;
        
        /// <remarks/>
        public InChIVersion version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public InChIStereo stereo {
            get {
                return this.stereoField;
            }
            set {
                this.stereoField = value;
            }
        }
        
        /// <remarks/>
        public bool fixedH {
            get {
                return this.fixedHField;
            }
            set {
                this.fixedHField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.chemspider.com/")]
    public enum InChIVersion {
        
        /// <remarks/>
        v102b,
        
        /// <remarks/>
        v102s,
        
        /// <remarks/>
        v103,
        
        /// <remarks/>
        v104,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.chemspider.com/")]
    public enum InChIStereo {
        
        /// <remarks/>
        No,
        
        /// <remarks/>
        Absolute,
        
        /// <remarks/>
        Relative,
        
        /// <remarks/>
        Racemic,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void Mol2ThreeDMolCompletedEventHandler(object sender, Mol2ThreeDMolCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Mol2ThreeDMolCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Mol2ThreeDMolCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void N2strwsDLLCompletedEventHandler(object sender, N2strwsDLLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class N2strwsDLLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal N2strwsDLLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void N2strwsbatDLLCompletedEventHandler(object sender, N2strwsbatDLLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class N2strwsbatDLLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal N2strwsbatDLLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void N2strwsCompletedEventHandler(object sender, N2strwsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class N2strwsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal N2strwsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void N2strwsbatCompletedEventHandler(object sender, N2strwsbatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class N2strwsbatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal N2strwsbatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void synonym2CSIDsCompletedEventHandler(object sender, synonym2CSIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class synonym2CSIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal synonym2CSIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void MolToInChICompletedEventHandler(object sender, MolToInChICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MolToInChICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MolToInChICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void MolToInChIKeyCompletedEventHandler(object sender, MolToInChIKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MolToInChIKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MolToInChIKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetStructureBestNameByCSIDCompletedEventHandler(object sender, GetStructureBestNameByCSIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStructureBestNameByCSIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStructureBestNameByCSIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetStructureBestNamesByCSIDsCompletedEventHandler(object sender, GetStructureBestNamesByCSIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStructureBestNamesByCSIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStructureBestNamesByCSIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetStructureSynonymsByCSIDCompletedEventHandler(object sender, GetStructureSynonymsByCSIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStructureSynonymsByCSIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStructureSynonymsByCSIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetWikipediaNamesCompletedEventHandler(object sender, GetWikipediaNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWikipediaNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWikipediaNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591