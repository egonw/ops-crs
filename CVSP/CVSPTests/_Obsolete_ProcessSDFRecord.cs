using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MoleculeObjects;
using RSC.CVSP.Compounds;

using RSC.CVSP.Compounds.Properties;
using com.ggasoftware.indigo;
using ChemSpider.Molecules;
using RSC.CVSP;

namespace CVSPTests
{
    //[TestClass]
    public class ProcessSDFRecordTest
    {
        [TestMethod]
        public void processSdfRecord_1()
        {
            string mol = @"265
  Mrv0541 02231214332D          

 15 15  0  0001  0  0  0  0  0999 V2000
    4.5080    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0
    3.0791    0.0000    0.0000 N   0  0  0  0  0  0  0  0  0  0  0
    3.0791   -0.8250    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
    2.3645    0.4125    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
    2.3645   -1.2375    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
    3.7935   -1.2375    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
    3.7935    0.4125    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
    2.3645   -2.0625    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
    2.3645    1.2375    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
    1.6500   -0.8250    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    3.7935   -2.0625    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    3.0791   -2.4751    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    3.7935    1.2375    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    4.5080    1.6500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    4.5080    2.4751    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//  1  7  2  0
//  2  3  1  0
//  2  4  1  0
//  2  7  1  0
//  3  5  1  0
//  3  6  2  0
//  4  9  1  0
//  5  8  2  0
//  5 10  1  0
//  6 11  1  0
//  7 13  1  0
//  8 12  1  0
// 11 12  2  0
// 13 14  2  3
// 14 15  1  0
//M  END
//
//> <SMILES>
//CCN(C(=O)C=CC)C1=CC=CC=C1C
//
//> <INCHI_IDENTIFIER>
//InChI=1S/C13H17NO/c1-4-8-13(15)14(5-2)12-10-7-6-9-11(12)3/h4,6-10H,5H2,1-3H3/b8-4+
//
//> <DRUGBANK_ID>
//DB00265
//
//> <IUPAC_NAME>
//N-ethyl-N-(2-methylphenyl)but-2-enamide
//
//> <ID>
//21
//22
//
$$$$";
            Dictionary<string, SDTagOptions> sdTagMap = new Dictionary<string, SDTagOptions>();
            sdTagMap.Add("ID", SDTagOptions.DEPOSITOR_SUBSTANCE_REGID);
            sdTagMap.Add("IUPAC_NAME", SDTagOptions.DEPOSITOR_SUBSTANCE_SYNONYM);
            sdTagMap.Add("INCHI_IDENTIFIER", SDTagOptions.DEPOSITOR_SUBSTANCE_INCHI);
            sdTagMap.Add("SMILES", SDTagOptions.DEPOSITOR_SUBSTANCE_SMILES);

            SdfRecord sdf = SdfRecord.FromString(mol);
        }
    }
}
			
//			rd.Process(true, true, Resources.Vendor.Indigo, true, sdTagMap, true, true, true);
//			//ProcessCompound processed_sdf = new ProcessCompound(sdf, sdTagMap, Resources.Modules_CVSP_Validation_Standardization,
//			//    shouldRunStandardization: true, isCRSDeposition: false);

//			Assert.IsTrue(rd.Substance.STANDARDIZED_SUBSTANCE.STD_INCHI.Equals("InChI=1S/C13H17NO/c1-4-8-13(15)14(5-2)12-10-7-6-9-11(12)3/h4,6-10H,5H2,1-3H3"), "original std inchi should be InChI=1S/C13H17NO/c1-4-8-13(15)14(5-2)12-10-7-6-9-11(12)3/h4,6-10H,5H2,1-3H3");
//			Assert.IsTrue(rd.Substance.STANDARDIZED_SUBSTANCE.INDIGO_CANONICAL_SMILES.Equals("CC1=CC=CC=C1N(CC)C(=O)C=CC"));

//			Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == "100.38" select p).Count() == 1);
//			Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == "100.45" select p).Count() == 1);
//			Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == "100.46" select p).Count() == 1);
//			Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == "100.51" select p).Count() == 1);
			
//		}

//		/// <summary>
//		/// checks that acid-base rules are being applied
//		/// </summary>
//		[TestMethod]
//		public void processSdfRecord_2()
//		{
//			string mol = @"10-20
//  SMMXDraw06061217052D
//
// 15 15  0  0000  0  0  0  0  0999 V2000
//    7.4153   -4.9714    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    9.4576   -4.9708    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    8.4384   -4.3811    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    9.4576   -6.1523    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    7.4153   -6.1576    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    8.4409   -6.7418    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    6.3924   -4.3808    0.0000 O   0  0  0  0  0  0  0  0  0  0  0
//   10.4805   -6.7428    0.0000 S   0  0  0  0  0  0  0  0  0  0  0
//    5.3695   -4.9714    0.0000 S   0  0  0  0  0  0  0  0  0  0  0
//    4.3467   -4.3808    0.0000 O   0  0  0  0  0  0  0  0  0  0  0
//    5.3695   -6.1525    0.0000 O   0  0  0  0  0  0  0  0  0  0  0
//    6.3924   -5.5619    0.0000 O   0  0  0  0  0  0  0  0  0  0  0
//   11.5033   -6.1523    0.0000 O   0  0  0  0  0  0  0  0  0  0  0
//   10.4805   -7.9239    0.0000 O   0  5  0  0  0  0  0  0  0  0  0
//    9.4576   -7.3334    0.0000 O   0  0  0  0  0  0  0  0  0  0  0
//  6  4  1  0
//  5  6  2  0
//  2  3  1  0
//  1  5  1  0
//  4  2  2  0
//  3  1  2  0
//  1  7  1  0
//  4  8  1  0
//  7  9  1  0
//  9 10  2  0
//  9 11  1  0
//  9 12  2  0
//  8 13  2  0
//  8 14  1  0
//  8 15  2  0
//M  CHG  1  14  -1
//M  END
//
//> <recid>
//gaga
//
//$$$$";
//			SdfRecord sdf = SdfRecord.FromString(mol);
//			Dictionary<string, Resources.SDTagOptions> sdTagMapDict = new Dictionary<string, Resources.SDTagOptions>();
//			sdTagMapDict.Add("recid", Resources.SDTagOptions.DEPOSITOR_SUBSTANCE_REGID);
//			//ProcessCompound processed_sdf = new ProcessCompound(sdf, sdTagMapDict, Resources.Modules_CVSP_Validation_Standardization,
//			//    shouldRunStandardization: true, isCRSDeposition: false);
//			Record rd = new Record(DataDomain.Substances, sdf.ToString());
			
//			rd.Process(true, true, Resources.Vendor.Indigo, true, sdTagMapDict, true, true, true);
//			Assert.IsTrue(!String.IsNullOrEmpty(rd.Substance.RECORD_EXTERNAL_REGID));

            
//			Assert.IsTrue(rd.Substance.STANDARDIZED_SUBSTANCE.STD_INCHI.Equals("InChI=1S/C6H6O7S2/c7-14(8,9)6-3-1-5(2-4-6)13-15(10,11)12/h1-4H,(H,7,8,9)(H,10,11,12)/p-1"), "original std inchi should be InChI=1S/C6H6O7S2/c7-14(8,9)6-3-1-5(2-4-6)13-15(10,11)12/h1-4H,(H,7,8,9)(H,10,11,12)/p-1");
//			Assert.IsTrue(rd.Substance.STANDARDIZED_SUBSTANCE.NON_STD_INCHI.Equals("InChI=1/C6H6O7S2/c7-14(8,9)6-3-1-5(2-4-6)13-15(10,11)12/h1-4H,(H,7,8,9)(H,10,11,12)/p-1/fC6H5O7S2/h7H/q-1"));
//			Assert.IsTrue(rd.Substance.STANDARDIZED_SUBSTANCE.INDIGO_CANONICAL_SMILES.Equals("[O-]S(=O)(=O)OC1C=CC(=CC=1)S(O)(=O)=O"));

//			Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == "100.8" select p).Count() == 1);
//			Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == "100.32" select p).Count() == 1);

//		}

//		/// <summary>
//		/// checks that acid-base rules are being applied
//		/// </summary>
//		[TestMethod]
//		public void processSdfRecord_chckMultipleRadicals()
//		{
//			string mol = @"
//    JSDraw01231411322D
//
// 11 10  0  0  0  0  0  0  0  0  1 V2000
//   12.7600   -7.4737    0.0000 Zr  0  0
//   20.1040   -3.2575    0.0000 C   0  0
//   19.6220   -4.7412    0.0000 C   0  0
//   18.8420   -2.3405    0.0000 C   0  0
//   18.0620   -4.7412    0.0000 C   0  0
//   17.5799   -3.2575    0.0000 C   0  0
//   20.1040  -10.5279    0.0000 C   0  0
//   19.6220  -12.0115    0.0000 C   0  0
//   18.8420   -9.6109    0.0000 C   0  0
//   18.0620  -12.0115    0.0000 C   0  0
//   17.5799  -10.5279    0.0000 C   0  0
//  2  3  1  0  0  0  0
//  2  4  1  0  0  0  0
//  3  5  1  0  0  0  0
//  4  6  1  0  0  0  0
//  5  6  1  0  0  0  0
//  7  8  1  0  0  0  0
//  7  9  1  0  0  0  0
//  8 10  1  0  0  0  0
//  9 11  1  0  0  0  0
// 10 11  1  0  0  0  0
//M  RAD  1   2   1
//M  RAD  1   3   1
//M  RAD  1   4   1
//M  RAD  1   5   1
//M  RAD  1   6   1
//M  RAD  1   7   1
//M  RAD  1   8   1
//M  RAD  1   9   1
//M  RAD  1  10   1
//M  RAD  1  11   1
//M  END
//
//> <recid>
//1
//
//$$$$";
//			SdfRecord sdf = SdfRecord.FromString(mol);
//			Dictionary<string, Resources.SDTagOptions> sdTagMapDict = new Dictionary<string, Resources.SDTagOptions>();
//			sdTagMapDict.Add("recid", Resources.SDTagOptions.DEPOSITOR_SUBSTANCE_REGID);

//			Record rd = new Record(DataDomain.Substances, sdf.ToString());
			
//			rd.Process(true, true, Resources.Vendor.Indigo, true, sdTagMapDict, true, true, true);

//			//ProcessCompound processed_sdf = new ProcessCompound(sdf, sdTagMapDict, Resources.Modules_CVSP_Validation_Standardization,
//			 //   shouldRunStandardization: true, isCRSDeposition: false);

//			Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == "100.36" select p).Count() == 1);
//			Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == "100.56" select p).Count() == 1);
//			//Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == "100.9" select p).Count() == 1);
//		}


//		[TestMethod]
//		public void processSdfRecord_FromText()
//		{
//			string mol = @"Minimum SDF Formatted Deposition without Chemical Structure
//  ChemSpiderEmpty
//
//  0  0  0  0000  0  0  0  0  0999 V2000
//M  END
//> <DEPOSITOR_SUBSTANCE_SYNONYM>
//1545376
//1-(4-oxo-4H-3,1-benzoxazin-2-yl)prolyl-L-alaninamide
//
//> <DEPOSITOR_SUBSTANCE_SMILES>
//C[C@@H](C(=O)N)NC(=O)C1CCCN1C2=NC3=CC=CC=C3C(=O)O2
//C1=CC(=CC(=C1)O)CO
//
//> <DEPOSITOR_SUBSTANCE_INCHI>
//InChI=1S/C16H18N4O4/c1-9(13(17)21)18-14(22)12-7-4-8-20(12)16-19-11-6-3-2-5-10(11)15(23)24-16/h2-3,5-6,9,12H,4,7-8H2,1H3,(H2,17,21)(H,18,22)/t9-,12-/m0/s1
//
//> <DEPOSITOR_PRIMARY_STRUCTURE_TAG>
//DEPOSITOR_SUBSTANCE_INCHI
//
//$$$$";
//			Record rd = new Record(DataDomain.Substances, mol);
			
//			rd.Process(true, true, Resources.Vendor.Indigo, true, null, true, true, true);
//			Assert.IsTrue(rd.Substance.STANDARDIZED_SUBSTANCE.STD_INCHI.Equals("InChI=1S/C16H18N4O4/c1-9(13(17)21)18-14(22)12-7-4-8-20(12)16-19-11-6-3-2-5-10(11)15(23)24-16/h2-3,5-6,9,12H,4,7-8H2,1H3,(H2,17,21)(H,18,22)/t9-,12-/m0/s1"));
//			Assert.IsTrue(rd.Substance.STANDARDIZED_SUBSTANCE.INDIGO_CANONICAL_SMILES.Equals("C[C@H](/N=C(\\O)/[C@@H]1CCCN1C1=NC2=CC=CC=C2C(=O)O1)C(=N)O"));
//			//Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == (int)Resources.IssueCode.validationInChIMatchStructure select p).Count() == 1);
//			//Assert.IsTrue((from p in rd.Issues where p.Code == "100.67" select p).Count() == 1);
//			Assert.IsTrue((from p in rd.Substance.ISSUES where p.Message.Equals("Contains N=C-OH tautomer of a carbonyl compound") select p).Count() == 1);
//			Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == "100.43" select p).Count() == 1);
//			Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == "100.44" select p).Count() == 1);
//			Assert.IsTrue((from p in rd.Substance.ISSUES where p.Code == "100.63" select p).Count() == 1);
//		}

//		[TestMethod]
//		public void processSdfRecord_Bad1()
//		{
//			//screwed up molfile
//			string mol = @"
//baba
// 15 25  0  0001  0  0  0  0  0999 V2000
//    4.5080    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0
//    3.0791    0.0000    0.0000 N   0  0  0  0  0  0  0  0  0  0  0
//    3.0791   -0.8250    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    2.3645    0.4125    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    2.3645   -1.2375    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    3.7935   -1.2375    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    3.7935    0.4125    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    2.3645   -2.0625    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    2.3645    1.2375    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    1.6500   -0.8250    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    3.7935   -2.0625    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    3.0791   -2.4751    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    3.7935    1.2375    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    4.5080    1.6500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//    4.5080    2.4751    0.0000 C   0  0  0  0  0  0  0  0  0  0  0
//  1  7  2  0
//  2  3  1  0
//  2  4  1  0
//  2  7  1  0
//  3  5  1  0
//  3  6  2  0
//  4  9  1  0
//  5  8  2  0
//  5 10  1  0
//  6 11  1  0
//  7 13  1  0
//  8 1b  1  0
// 11 12  2  0
// 13 14  2  3
// 141a8  1  0
//M  END
//
//> <test1 tag>
//data1
//
//> <test2 tag>
//data2
//
//
//$$$$";
//			Dictionary<string, string> sdTagMap = new Dictionary<string, string>();
//			List<Issue> issues = new List<Issue>();
//			ValidationModules.isMolfileFormatValid(mol, out mol, true,issues);

//			Assert.IsTrue((from p in issues where p.Code == "300.6" select p).Count() == 1);
//			Assert.IsTrue((from p in issues where p.Code == "300.4" select p).Count() == 1);

//		}

//		[TestMethod]
//		public void testBadBonds()
//		{
//			string mol = @"
//  Mrv0541 04191212142D          
//
//124138  0  0  0  0            999 V2000
//    4.1932   -6.8435    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    4.6775   -7.5113    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//    3.4083   -7.0977    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    4.1920   -8.1783    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    3.4076   -7.9228    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    4.4488   -6.0590    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    4.4463   -8.9631    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    5.2307   -9.2188    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    5.8986   -8.7344    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//    5.4850  -10.0035    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    6.5656   -9.2200    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    6.3101  -10.0043    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    7.3504   -8.9656    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    7.6054   -8.1811    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    7.1205   -7.5136    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//    8.3900   -7.9261    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    7.6054   -6.8461    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    8.3900   -7.1011    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    7.3504   -6.0616    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    5.2332   -5.8035    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    5.9010   -6.2877    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//    5.4875   -5.0185    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    6.5681   -5.8022    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    6.3126   -5.0179    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    9.1041   -6.6968    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    9.1041   -8.3368    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    2.6942   -6.6847    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    1.9793   -7.0965    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    2.6928   -8.3347    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    1.2651   -6.6835    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    0.5504   -7.0954    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//    1.2658   -5.8585    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//    6.7226  -10.7187    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    5.0726  -10.7188    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    6.7251   -4.3033    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    5.0751   -4.3033    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    9.1054   -9.1618    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    4.2501   -4.3033    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    3.8378   -3.5886    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    3.0128   -3.5884    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//    4.2504   -2.8742    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   10.3148   -8.3208    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   14.3552   -8.1947    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   14.8396   -7.5268    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//   13.5704   -7.9405    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   14.3541   -6.8598    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   13.5696   -7.1155    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   14.6109   -8.9792    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   14.6083   -6.0750    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   15.3927   -5.8195    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   16.0606   -6.3037    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//   15.6470   -5.0345    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   16.7276   -5.8182    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   16.4721   -5.0339    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   17.5124   -6.0726    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   17.7674   -6.8572    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   17.2825   -7.5247    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//   18.5520   -7.1121    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   17.7674   -8.1921    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   18.5520   -7.9372    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   17.5125   -8.9767    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   15.3952   -9.2347    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   16.0631   -8.7504    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//   15.6495  -10.0196    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   16.7301   -9.2360    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   16.4746  -10.0203    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   19.2661   -8.3414    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   19.2661   -6.7013    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   12.8562   -8.3536    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   12.1413   -7.9416    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   12.8548   -6.7035    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   11.4272   -8.3546    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   11.4278   -9.1796    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   16.8846   -4.3195    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   15.2346   -4.3193    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   16.8871  -10.7349    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   15.2371  -10.7349    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   20.3772   -6.7092    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   19.2674   -5.8764    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   14.4121  -10.7350    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   13.9998  -11.4496    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   13.1748  -11.4499    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   14.4125  -12.1640    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   26.3996   -8.1751    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   25.9153   -7.5072    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//   27.1845   -7.9209    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   26.4008   -6.8402    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   27.1852   -7.0959    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   26.1440   -8.9596    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   26.1466   -6.0554    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   25.3621   -5.7999    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   24.6943   -6.2841    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//   25.1079   -5.0149    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   24.0273   -5.7986    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   24.2828   -5.0143    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   23.2425   -6.0530    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   22.9875   -6.8376    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   23.4724   -7.5051    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//   22.2028   -7.0924    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   22.9875   -8.1725    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   22.2028   -7.9176    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   23.2424   -8.9571    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   25.3597   -9.2151    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   24.6918   -8.7308    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//   25.1054  -10.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   24.0248   -9.2164    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   24.2803  -10.0007    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   21.4888   -8.3218    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   21.4890   -6.6901    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   27.8987   -8.3340    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   28.6135   -7.9220    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   27.9001   -6.6839    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   29.3277   -8.3350    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   30.0425   -7.9232    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   29.3271   -9.1600    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   23.8703   -4.2999    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   25.5203   -4.2997    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   23.8678  -10.7152    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   25.5178  -10.7152    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   21.4875   -5.8567    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   26.3428  -10.7154    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   26.7551  -11.4300    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   27.5801  -11.4303    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   26.3424  -12.1444    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//  2  1  1  0  0  0  0
//  3  1  1  0  0  0  0
//  4  2  1  0  0  0  0
//  5  3  2  0  0  0  0
//  5  4  1  0  0  0  0
//  1  6  2  0  0  0  0
//  4  7  2  0  0  0  0
//  9  8  2  0  0  0  0
// 10  8  1  0  0  0  0
// 11  9  1  0  0  0  0
// 12 10  2  0  0  0  0
// 12 11  1  0  0  0  0
//  8  7  1  0  0  0  0
// 11 13  1  0  0  0  0
// 15 14  1  0  0  0  0
// 16 14  2  0  0  0  0
// 17 15  1  0  0  0  0
// 18 16  1  0  0  0  0
// 18 17  2  0  0  0  0
// 14 13  1  0  0  0  0
// 17 19  1  0  0  0  0
// 21 20  2  0  0  0  0
// 22 20  1  0  0  0  0
// 23 21  1  0  0  0  0
// 24 22  2  0  0  0  0
// 24 23  1  0  0  0  0
// 20  6  1  0  0  0  0
// 23 19  2  0  0  0  0
// 18 25  1  0  0  0  0
// 16 26  1  0  0  0  0
// 27  3  1  0  0  0  0
// 28 27  1  0  0  0  0
// 29  5  1  0  0  0  0
// 28 30  1  0  0  0  0
// 30 31  1  0  0  0  0
// 30 32  2  0  0  0  0
// 12 33  1  0  0  0  0
// 34 10  1  0  0  0  0
// 24 35  1  0  0  0  0
// 36 22  1  0  0  0  0
// 26 37  1  0  0  0  0
// 36 38  1  0  0  0  0
// 38 39  1  0  0  0  0
// 39 40  1  0  0  0  0
// 39 41  2  0  0  0  0
// 26 42  1  0  0  0  0
// 44 43  1  0  0  0  0
// 45 43  1  0  0  0  0
// 46 44  1  0  0  0  0
// 47 45  2  0  0  0  0
// 47 46  1  0  0  0  0
// 43 48  2  0  0  0  0
// 46 49  2  0  0  0  0
// 51 50  2  0  0  0  0
// 52 50  1  0  0  0  0
// 53 51  1  0  0  0  0
// 54 52  2  0  0  0  0
// 54 53  1  0  0  0  0
// 50 49  1  0  0  0  0
// 53 55  1  0  0  0  0
// 57 56  1  0  0  0  0
// 58 56  2  0  0  0  0
// 59 57  1  0  0  0  0
// 60 58  1  0  0  0  0
// 60 59  2  0  0  0  0
// 56 55  1  0  0  0  0
// 59 61  1  0  0  0  0
// 63 62  2  0  0  0  0
// 64 62  1  0  0  0  0
// 65 63  1  0  0  0  0
// 66 64  2  0  0  0  0
// 66 65  1  0  0  0  0
// 62 48  1  0  0  0  0
// 65 61  2  0  0  0  0
// 60 67  1  0  0  0  0
// 58 68  1  0  0  0  0
// 69 45  1  0  0  0  0
// 70 69  1  0  0  0  0
// 71 47  1  0  0  0  0
// 70 72  1  0  0  0  0
// 72 73  2  0  0  0  0
// 54 74  1  0  0  0  0
// 75 52  1  0  0  0  0
// 66 76  1  0  0  0  0
// 77 64  1  0  0  0  0
// 68 78  1  0  0  0  0
// 68 79  1  0  0  0  0
// 77 80  1  0  0  0  0
// 80 81  1  0  0  0  0
// 81 82  1  0  0  0  0
// 81 83  2  0  0  0  0
// 85 84  1  0  0  0  0
// 86 84  1  0  0  0  0
// 87 85  1  0  0  0  0
// 88 86  2  0  0  0  0
// 88 87  1  0  0  0  0
// 84 89  2  0  0  0  0
// 87 90  2  0  0  0  0
// 92 91  2  0  0  0  0
// 93 91  1  0  0  0  0
// 94 92  1  0  0  0  0
// 95 93  2  0  0  0  0
// 95 94  1  0  0  0  0
// 91 90  1  0  0  0  0
// 94 96  1  0  0  0  0
// 98 97  1  0  0  0  0
// 99 97  2  0  0  0  0
//100 98  1  0  0  0  0
//101 99  1  0  0  0  0
//101100  2  0  0  0  0
// 97 96  1  0  0  0  0
//100102  1  0  0  0  0
//104103  2  0  0  0  0
//105103  1  0  0  0  0
//106104  1  0  0  0  0
//107105  2  0  0  0  0
//107106  1  0  0  0  0
//103 89  1  0  0  0  0
//106102  2  0  0  0  0
//101108  1  0  0  0  0
// 99109  1  0  0  0  0
//110 86  1  0  0  0  0
//111110  1  0  0  0  0
//112 88  1  0  0  0  0
//111113  1  0  0  0  0
//113114  1  0  0  0  0
//113115  2  0  0  0  0
// 95116  1  0  0  0  0
//117 93  1  0  0  0  0
//107118  1  0  0  0  0
//119105  1  0  0  0  0
//109 78  1  0  0  0  0
//109120  1  0  0  0  0
//119121  1  0  0  0  0
//121122  1  0  0  0  0
//122123  1  0  0  0  0
//122124  2  0  0  0  0
// 72 42  1  0  0  0  0
//A   34
//R
//A   75
//R
//A  117
//R
//M  STY  1   1 GEN
//M  SCN  1   1 HT 
//M  SAL   1 15  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57
//M  SAL   1 15  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
//M  SAL   1 11  73  74  75  76  77  78  79  80  81  82  83
//M  SDI   1  4   11.0072  -12.5840   11.0072   -3.8993
//M  SDI   1  4   20.7972   -3.8993   20.7972  -12.5840
//M  END
//> <DRUGBANK_ID>
//DB00707
//
//$$$$";
//			Dictionary<string, string> sdTagMap = new Dictionary<string, string>();
//			List<Issue> issues = new List<Issue>();
			
//			ValidationModules.isMolfileFormatValid(mol, out mol, true, issues);

//			Assert.IsTrue(issues.Count == 0);
//		}

//		[TestMethod]
//		public void processSdfRecord_MolfileValidation_2()
//		{
//			//screwed up molfile
//			string mol = @"138068-37-8.mol
//  Mrv0541 05081314332D          
//
// 32 31  0  0  0  0            999 V2000
//    0.2224   -0.6376    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//    1.1553   -1.1553    0.0000 C   0  0  1  0  0  0  0  0  0  0  0  0
//   -0.1199   -1.3413    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    0.9908   -0.1712    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    1.8643   -0.7535    0.0000 C   0  0  1  0  0  0  0  0  0  0  0  0
//    1.1553   -1.9855    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   -0.9314   -1.3413    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    0.9908    0.6376    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    2.5760   -1.1553    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    1.8643    0.0499    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//    1.8858   -2.3953    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   -1.3682   -0.6160    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//    0.2953    1.0258    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//    3.3120   -0.7535    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   -2.0772   -0.2143    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   -2.0286   -1.2198    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   -0.1281    1.7349    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    1.0123    1.6701    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   -2.0772    0.5945    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   -2.8806   -1.2198    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   -0.9531    1.7349    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    1.9424    1.6701    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   -1.3682    1.0258    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
//   -3.2985   -1.9424    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   -3.3120   -0.5082    0.0000 O   0  5  0  0  0  0  0  0  0  0  0  0
//    2.3603    2.3953    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//    2.4250    1.0043    0.0000 O   0  5  0  0  0  0  0  0  0  0  0  0
//   -2.0286    1.6270    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   -2.8375    1.6270    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//   -3.2338    2.3522    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   -3.2553    0.9019    0.0000 O   0  5  0  0  0  0  0  0  0  0  0  0
//   -0.5728    0.2494    0.0000 Gd  0  1  0  0  0  0  0  0  0  0  0  0
//  1  2  1  0  0  0  0
//  1  3  1  0  0  0  0
//  1  4  1  0  0  0  0
//  2  5  1  0  0  0  0
//  2  6  1  1  0  0  0
//  3  7  1  0  0  0  0
//  4  8  1  0  0  0  0
//  5  9  1  0  0  0  0
//  5 10  1  6  0  0  0
//  6 11  1  0  0  0  0
//  7 12  1  0  0  0  0
//  8 13  1  0  0  0  0
//  9 14  1  0  0  0  0
// 12 15  1  0  0  0  0
// 12 16  1  0  0  0  0
// 13 17  1  0  0  0  0
// 13 18  1  0  0  0  0
// 15 19  1  0  0  0  0
// 16 20  1  0  0  0  0
// 17 21  1  0  0  0  0
// 18 22  1  0  0  0  0
// 19 23  1  0  0  0  0
// 20 24  2  0  0  0  0
// 20 25  1  0  0  0  0
// 21 23  1  0  0  0  0
// 22 26  2  0  0  0  0
// 22 27  1  0  0  0  0
// 23 28  1  0  0  0  0
// 28 29  1  0  0  0  0
// 29 30  2  0  0  0  0
// 29 31  1  0  0  0  0
//M  CHG  4  25  -1  27  -1  31  -1  32   3
//M  END
//$$$$";
//			Dictionary<string, string> sdTagMap = new Dictionary<string, string>();
//			List<Issue> issues = new List<Issue>();
			
//			ValidationModules.isMolfileFormatValid(mol, out mol,  true,  issues);
//			Assert.IsTrue(issues.Count == 0);
//		}

//		[TestMethod]
//		public void processSdfRecord_MolfileValidation_3()
//		{
//			//screwed up molfile
//			string mol = @"471
//  -OEChem-02070708192D
//
// 34 36  0     1  0  0  0  0  0999 V2000
//    6.8671    0.2704    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//    5.1350   -1.7296    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//    6.8671   -2.7296    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//    8.6155   -2.7642    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//   10.3972    0.2945    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//    4.2690    2.7704    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//    2.5369    1.7704    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
//    6.0010   -0.2296    0.0000 C   0  0  3  0  0  0  0  0  0  0  0  0
//    6.0010   -1.2296    0.0000 C   0  0  3  0  0  0  0  0  0  0  0  0
//    5.1350    0.2704    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    6.8671   -1.7296    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    7.7331   -1.2296    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    7.7331   -0.2296    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    8.6270   -1.7643    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    5.1350    1.2704    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    4.2690   -0.2296    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    8.6270    0.3051    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    9.5331   -1.2504    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    9.5331   -0.2088    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    4.2690    1.7704    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    3.4030    0.2704    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    3.4030    1.2704    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
//    5.4641   -0.5396    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
//    5.4641   -0.9196    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
//    5.6719    1.5804    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
//    4.2690   -0.8496    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
//    8.6199    0.9250    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
//    5.1350   -2.3496    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
//   10.0688   -1.5625    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
//    2.8660   -0.0396    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
//    9.1488   -3.0804    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
//   10.9353   -0.0134    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
//    4.8059    3.0804    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
//    2.0000    1.4604    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
//  1  8  1  0  0  0  0
//  1 13  1  0  0  0  0
//  2  9  1  0  0  0  0
//  2 28  1  0  0  0  0
//  3 11  2  0  0  0  0
//  4 14  1  0  0  0  0
//  4 31  1  0  0  0  0
//  5 19  1  0  0  0  0
//  5 32  1  0  0  0  0
//  6 20  1  0  0  0  0
//  6 33  1  0  0  0  0
//  7 22  1  0  0  0  0
//  7 34  1  0  0  0  0
//  8  9  1  0  0  0  0
//  8 10  1  0  0  0  0
//  8 23  1  0  0  0  0
//  9 11  1  0  0  0  0
//  9 24  1  0  0  0  0
// 10 15  2  0  0  0  0
// 10 16  1  0  0  0  0
// 11 12  1  0  0  0  0
// 12 13  1  0  0  0  0
// 12 14  2  0  0  0  0
// 13 17  2  0  0  0  0
// 14 18  1  0  0  0  0
// 15 20  1  0  0  0  0
// 15 25  1  0  0  0  0
// 16 21  2  0  0  0  0
// 16 26  1  0  0  0  0
// 17 19  1  0  0  0  0
// 17 27  1  0  0  0  0
// 18 19  2  0  0  0  0
// 18 29  1  0  0  0  0
// 20 22  2  0  0  0  0
// 21 22  1  0  0  0  0
// 21 30  1  0  0  0  0
//M  END
//> <PUBCHEM_BONDANNOTATIONS>
//10  15  8
//10  16  8
//12  13  8
//12  14  8
//13  17  8
//14  18  8
//15  20  8
//16  21  8
//17  19  8
//18  19  8
//9  2  3
//20  22  8
//21  22  8
//8  10  3
//
//> <ext_id>
//NPU0612049801
//
//> <ext_url>
//http://www.rsc.org/Publishing/CurrentAwareness/NPU/NPUDisplaySearchResults.cfm?articleid=049801
//
//> <csid>
//458
//
//$$$$";
//			Dictionary<string, string> sdTagMap = new Dictionary<string, string>();
//			List<Issue> issues = new List<Issue>();
			
//			ValidationModules.isMolfileFormatValid(mol, out mol, true, issues);

//			Assert.IsTrue(issues.Count == 0);


//		}

//		[TestMethod]
//		public void processSdfRecord_MolfileValidation_4()
//		{
//			//screwed up molfile
//			string mol = @"
//  -ACD/LAB-  
// 27 28  0  0  0  0  0  0  0  0  1
//    7.2330    1.0E-0    0.0000 AQ  0  0  0  0  0  0  0  0  0
//    8.9000   -6.7330    0.0000 D   0  0  0  0  0  0  0  0  0
//    6.1000   -6.8660    0.0000 Cl  0  0  0  0  0  0  0  0  0
//    3.2000   -2.1330    kakaba H   0  0  0  0  0  0  0  0  0
//    4.8000   -7.1990    0.0000 H   0  0  0  0  0  0  0  0  0
//    7.2330   -3.8660    0.0000 O   0  0  0  0  0  0  0  0  0
//    5.5000   -4.4330    0.0000 O   0  0  0  0  0  0  0  0  0
//    5.1660   -1.5990    0.0000 O   0  0  0  0  0  0  0  0  0
//   12.0330   -2.5660    0.0000 O   0  0  0  0  0  0  0  0  0
//   10.9330   -6.9660    0.0000 Cl  0  0  0  0  0  0  0  0  0
//   10.4000   -0.6660    0.0000 Br  0  0  0  0  0  0  0  0  0
//    1.2000   -3.8990    0.0000 Br  0  0  0  0  0  0  0  0  0
//    6.4330   -1.9330    0.0000 C   0  0  0  0  0  0  0  0  0
//    7.5330   -2.3330    0.0000 C   0  0  0  0  0  0  0  0  0
//    8.3000   -5.5330    0.0000 C   0  0  0  0  0  0  0  0  0
//   10.7330   -3.0990    0.0000 C   0  0  0  0  0  0  0  0  0
//    9.3660   -5.4990    0.0000 D   0  0  0  0  0  0  0  0  0
//   10.0660   -1.9330    0.0000 C   0  0  0  0  0  0  0  0  0
//    6.4330   -5.5660    0.0000 C   0  0  0  0  0  0  0  0  0
//    5.3660   -3.2330    0.0000 C   0  0  0  0  0  0  0  0  0
//   10.7330   -4.4330    0.0000 C   0  0  0  0  0  0  0  0  0
//    8.8000   -1.6330    0.0000 C   0  0  0  0  0  0  0  0  0
//    7.3330   -6.2330    0.0000 C   0  0  0  0  0  0  0  0  0
//    3.2660   -4.0330    0.0000 C   0  0  0  0  0  0  0  0  0
//    5.1660   -5.9330    0.0000 C   0  0  0  0  0  0  0  0  0
//    4.2000   -4.9660    0.0000 C   0  0  0  0  0  0  0  0  0
//    4.2660   -2.4330    0.0000 C   0  0  0  0  0  0  0  0  0
// 13  8  1  6  2  0  0
// 14  6  1  0  2  0  0
// 14 13  1  0  2  0  0
// 14  1  1  6  2  0  0
// 15  6  1  0  2  0  0
// 15  2  1  6  2  0  0
// 16  9  1  6  2  0  0
// 17 10  1  1  2  0  0
// 17 15  1  0  2  0  0
// 18 11  1  6  2  0  0
// 18 16  1  0  2  0  0
// 19  7  1  0  2  0  0
// 19  3  1  6  2  0  0
// 20  7  1  0  2  0  0
// 20 13  1  0  2  0  0
// 21 16  1  0  2  0  0
// 21 17  1  0  2  0  0
// 22 14  1  0  2  0  0
// 22 18  1  0  2  0  0
// 15 23  1  0  2  0  0
// 23 19  1  0  2  0  0
// 24 12  1  1  2  0  0
// 24  4  1  0  2  0  0
// 25 19  1  0  2  0  0
// 25  5  1  0  2  0  0
// 26 24  2  0  2  0  0
// 26 25  2  0  2  0  0
// 20 27  1  1  2  0  0
//M  END> <ext_id>
//> <ext_url>
//http://www.rsc.org/Publishing/CurrentAwareness/NPU/NPUDisplaySearchResults.cfm?articleid=063046
//
//> <csid>
//25991461
//
//$$$$
//";
//			Dictionary<string, string> sdTagMap = new Dictionary<string, string>();
//			List<Issue> issues = new List<Issue>();
			
//			ValidationModules.isMolfileFormatValid(mol, out mol, true, issues);

//			Assert.IsTrue(issues.Count == 4);


//		}

//		[TestMethod]
//		public void processSdfRecord_MolfileValidation_5()
//		{
//			//screwed up molfile
//			string mol = @"
//  -ACD/LAB-  
//
// 42 45  0  0  0  0  0  0  0  0  1
//    8.7330   -2.2660    0.0000 O   0  0  0  0  0  0  0  0  0
//    3.9660   -4.6990    0.0000 O   0  0  0  0  0  0  0  0  0
//   11.7330   -1.4990    0.0000 O   0  0  0  0  0  0  0  0  0
//    9.0330   -7.8330    0.0000 N   0  0  0  0  0  0  0  0  0
//    8.0660   -4.5990    0.0000 C   0  0  0  0  0  0  0  0  0
//    7.5660   -3.1990    0.0000 C   0  0  0  0  0  0  0  0  0
//    9.5000   -4.5990    0.0000 C   0  0  0  0  0  0  0  0  0
//    7.2330   -5.9990    0.0000 C   0  0  0  0  0  0  0  0  0
//    6.0660   -2.8990    0.0000 C   0  0  0  0  0  0  0  0  0
//    7.0330   -5.4660    0.0000 C   0  0  0  0  0  0  0  0  0
//    9.9000   -3.0990    0.0000 C   0  0  0  0  0  0  0  0  0
//    7.7000   -7.2990    0.0000 C   0  0  0  0  0  0  0  0  0
//   10.5330   -5.6330    0.0000 C   0  0  0  0  0  0  0  0  0
//    5.1330   -4.0660    0.0000 C   0  0  0  0  0  0  0  0  0
//   10.3000   -7.0660    0.0000 C   0  0  0  0  0  0  0  0  0
//    5.6330   -5.4660    0.0000 C   0  0  0  0  0  0  0  0  0
//   11.3330   -2.7990    0.0000 C   0  0  0  0  0  0  0  0  0
//   11.9660   -5.2660    0.0000 C   0  0  0  0  0  0  0  0  0
//   12.3660   -3.8660    0.0000 C   0  0  0  0  0  0  0  0  0
//    9.2330  -10.1660    0.0000 C   0  0  0  0  0  0  0  0  0
//   10.8000   -0.4990    0.0000 C   0  0  0  0  0  0  0  0  0
//    7.2330   -1.8660    0.0000 H   0  0  0  0  0  0  0  0  0
//    6.1330   -6.6660    0.0000 H   0  0  0  0  0  0  0  0  0
//    5.5330   -4.3660    0.0000 H   0  0  0  0  0  0  0  0  0
//    4.0660   -1.7330    0.0000 H   0  0  0  0  0  0  0  0  0
//    6.9330   -0.6990    0.0000 H   0  0  0  0  0  0  0  0  0
//    7.7660   -7.5990    0.0000 H   0  0  0  0  0  0  0  0  0
//    7.3330   -9.6330    0.0000 H   0  0  0  0  0  0  0  0  0
//    5.3000   -7.4660    0.0000 H   0  0  0  0  0  0  0  0  0
//    4.2660   -2.9660    0.0000 H   0  0  0  0  0  0  0  0  0
//   11.6330   -6.9330    0.0000 H   0  0  0  0  0  0  0  0  0
//   10.7000   -8.3330    0.0000 H   0  0  0  0  0  0  0  0  0
//    4.2330   -7.3330    0.0000 H   0  0  0  0  0  0  0  0  0
//   12.8660   -6.2660    0.0000 H   0  0  0  0  0  0  0  0  0
//   14.6660   -3.2990    0.0000 H   0  0  0  0  0  0  0  0  0
//    8.6000  -10.1990    0.0000 H   0  0  0  0  0  0  0  0  0
//    9.9000  -10.1330    0.0000 H   0  0  0  0  0  0  0  0  0
//    9.2660  -10.8330    0.0000 H   0  0  0  0  0  0  0  0  0
//    3.9660   -5.3660    0.0000 H   0  0  0  0  0  0  0  0  0
//   10.3000   -0.9660    0.0000 H   0  0  0  0  0  0  0  0  0
//   11.3000   -0.0660    0.0000 H   0  0  0  0  0  0  0  0  0
//   10.3330    1.0E-0    0.0000 H   0  0  0  0  0  0  0  0  0
//  1  6  1  0  2  0  0
//  1 11  1  0  2  0  0
//  2 14  1  0  2  0  0
//  2 39  1  0  2  0  0
//  3 17  1  0  2  0  0
//  3 21  1  0  2  0  0
//  4 12  1  0  2  0  0
//  4 15  1  0  2  0  0
//  4 20  1  0  2  0  0
//  5  6  1  0  2  0  0
//  5  7  1  0  2  0  0
//  5  8  1  0  2  0  0
//  5 10  1  0  2  0  0
//  6  9  1  0  2  0  0
//  6 22  1  0  2  0  0
//  7 11  1  0  2  0  0
//  7 13  2  0  2  0  0
//  8 12  1  0  2  0  0
//  8 23  1  0  2  0  0
//  8 24  1  0  2  0  0
//  9 14  1  0  2  0  0
//  9 25  1  0  2  0  0
//  9 26  1  0  2  0  0
// 10 16  2  0  2  0  0
// 10 27  1  0  2  0  0
// 11 17  2  0  2  0  0
// 12 28  1  0  2  0  0
// 12 29  1  0  2  0  0
// 13 15  1  0  2  0  0
// 13 18  1  0  2  0  0
// 14 16  1  0  2  0  0
// 14 30  1  0  2  0  0
// 15 31  1  0  2  0  0
// 15 32  1  0  2  0  0
// 16 33  1  0  2  0  0
// 17 19  1  0  2  0  0
// 18 19  2  0  2  0  0
// 18 34  1  0  2  0  0
// 19 35  1  0  2  0  0
// 20 36  1  0  2  0  0
// 20 37  1  0  2  0  0
// 20 38  1  0  2  0  0
// 21 40  1  0  2  0  0
// 21 41  1  0  2  0  0
// 21 42  1  0  2  0  0
//M  END
//> <CSID>
//3331
//
//$$$$
//";
//			Dictionary<string, string> sdTagMap = new Dictionary<string, string>();
//			List<Issue> issues = new List<Issue>();
			
//			ValidationModules.isMolfileFormatValid(mol, out mol, true,issues);
//			//Indigo i = new Indigo();
//			//IndigoObject obj = i.loadMolecule(mol);
//			Assert.IsTrue(issues.Count == 1);


//		}


//		[TestMethod]
//		public void processSdfRecord_MolfileValidation_OnGoing()
//		{
//			//screwed up molfile
//			string sdf = @"Untitled Document
//CDXL12
//
// 15 15  0  0  0  0  0  0  0  0999 V2000
//   -1.7862    0.2062    0.0000 C   0  0  0  0  0  0  0  2  0  0  0  0
//   -1.7862   -0.6188    0.0000 C   0  0  0  0  0  0  0  2  0  0  0  0
//   -1.0717   -1.0313    0.0000 C   0  0  0  0  0  0  0  2  0  0  0  0
//   -0.3572   -0.6188    0.0000 C   0  0  0  0  0  0  0  2  0  0  0  0
//   -0.3572    0.2062    0.0000 C   0  0  0  0  0  0  0  2  0  0  0  0
//   -1.0717    0.6188    0.0000 C   0  0  0  0  0  0  0  2  0  0  0  0
//   -1.0717    1.4438    0.0000 O   0  0  0  0  0  0  0  2  0  0  0  0
//   -0.3572    1.8563    0.0000 C   0  0  0  0  0  0  0  2  0  0  0  0
//    0.3572    1.4438    0.0000 C   0  0  0  0  0  0  0  2  0  0  0  0
//    1.0717    1.8563    0.0000 O   0  0  0  0  0  0  0  2  0  0  0  0
//    1.7862    1.4438    0.0000 C   0  0  0  0  0  0  0  2  0  0  0  0
//    2.5006    1.8563    0.0000 C   0  0  0  0  0  0  0  2  0  0  0  0
//    0.3572    0.6188    0.0000 O   0  0  0  0  0  0  0  2  0  0  0  0
//   -2.5006    0.6188    0.0000 Cl  0  0  0  0  0  0  0  2  0  0  0  0
//   -1.0717   -1.8563    0.0000 Cl  0  0  0  0  0  0  0  2  0  0  0  0
//  1  2  2  0        0
//  2  3  1  0        0
//  3  4  2  0        0
//  4  5  1  0        0
//  5  6  2  0        0
//  6  1  1  0        0
//  6  7  1  0        0
//  7  8  1  0        0
//  8  9  1  0        0
//  9 10  1  0        0
// 10 11  1  0        0
// 11 12  1  0        0
//  9 13  2  0        0
//  1 14  1  0        0
//  3 15  1  0        0
//V    1 0
//V    2 1
//V    3 2
//V    4 3
//V    5 4
//V    6 5
//V    7 6
//V    8 7
//V    9 8
//V   10 9
//V   11 10
//V   12 11
//V   13 12
//V   14 13
//V   15 14
//M  END
//> <ext_id>
//10324
//
//$$$$";
//			SdfRecord sdf_rec = SdfRecord.FromString(sdf);
//			Dictionary<string, SDTagOptions> sdTagMapDict = new Dictionary<string, SDTagOptions>();
//			sdTagMapDict.Add("ext_id", Resources.SDTagOptions.DEPOSITOR_SUBSTANCE_REGID);
//			Record rd = new Record(DataDomain.Substances, sdf_rec.ToString());
			
//			rd.Process(true, true, Resources.Vendor.Indigo, true, sdTagMapDict, true, true, true);
//			//ProcessCompound p_sdf = new ProcessCompound(sdf_rec, sdTagMapDict, Resources.Modules_ParentChild_DataModel, true, true);
            
//			Assert.IsTrue(rd.Substance.ISSUES.Count == 0);
//		}
//	}
//}
